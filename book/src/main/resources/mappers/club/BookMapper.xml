<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="project.books.club.book.BookMapper">
	
	<!-- 도서 목록 -->
	<select id="selectBookList" parameterType="project.books.club.cmmn.SrchVO" resultType="project.books.sys.util.CamelMap">
		/*BookMapper.selectBookList*/
		select * from (
			select b.book_no 
			     , b.book_title 
			     , b.book_writer
			     , (select count(*) from books_eval be where b.book_no = be.book_no) as book_app
			     , ifnull((select avg(be.book_score) from books_eval be where b.book_no = be.book_no), 0) as book_avg
			     , date_format(b.frst_reg_dt, '%Y-%m-%d %H:%i:%S') as frst_reg_dt  
			  from books b
			<include refid="bookListWhere"></include>
		       ) b
		 order by b.book_app desc, b.book_avg desc, b.book_title asc
	</select>
	
	<!-- 도서 목록 수 -->
	<select id="selectBookListCnt" parameterType="project.books.club.cmmn.SrchVO" resultType="Integer">
		/*BookMapper.selectBookListCnt*/
		select count(*) 
		  from books b
		<include refid="bookListWhere"></include>
	</select>
	
	<!-- 도서 목록 Where -->
	<sql id="bookListWhere">
		where 1=1
		<!-- 텍스트 검색 -->
		<if test='srchGbn != null and srchGbn != "" and srchText != null and srchText != ""'>
			<if test='"B".equals(srchGbn)'>
		  and b.book_title like concat('%',#{srchText},'%')
			</if>
			<if test='"W".equals(srchGbn)'>
		  and b.book_writer like concat('%',#{srchText},'%')
			</if>
		</if>
	</sql>
	
	<!-- 도서 등록 -->
	<insert id="insertBook" useGeneratedKeys="true" keyProperty="bookNo" parameterType="project.books.club.book.BookVO">
		/*BookMapper.insertBook*/
		insert into books (
			  book_title
			, book_writer
			, public_dt
			, frst_reg_no
			, frst_reg_dt
			, last_upd_no
			, last_upd_dt
		) values (
			  #{bookTitle}
			, #{bookWriter}
			, ifnull(#{publicDt}, '')
			, #{userNo}
			, now()
			, #{userNo}
			, now()
		)
	</insert>
	
	<!-- 도서 수정 -->
	<update id="updateBook" parameterType="java.util.HashMap">
		/*BookMapper.updateBook*/
		update books 
		   set book_title 	= #{data2}
			 , book_writer	= #{data3}
			 , public_dt	= #{data4}
		 where book_no 		= #{data1}
	</update>
	
	<!-- 도서 삭제 -->
	<delete id="deleteBook" parameterType="java.util.HashMap">
		/*BookMapper.deleteBook*/
		delete from books 
		 where book_no = #{data1}
	</delete>
	
	
	<!-- 공통 검색 목록 -->
	<select id="selectSearchData" parameterType="project.books.club.cmmn.SrchVO" resultType="project.books.sys.util.CamelMap">
		/*BookMapper.selectSearchData*/
		select *
		  from (select 'meeting' as gbn
				     , m.title as data1
				     , date_format(m.dday, '%Y-%m-%d') as data2
				     , m.meeting_no as data_key 
				  from meeting m
				 where 1=1 
				   and m.title like concat('%',#{srchCmmn},'%')
				union all 		 
				select 'member' as gbn
				     , mm.nick_nm as data1
				     , concat(mm.name, ifnull(concat('(',mm.email,')'), '')) as data2
				     , mm.member_no  as data_key
				  from member mm
				       join club_member cm on mm.member_no = cm.member_no  
				 where 1=1 
				   and mm.nick_nm like concat('%',#{srchCmmn},'%') or mm.name like concat('%',#{srchCmmn},'%')
				union all 
				select 'books' as gbn
				     , bk.book_title as data1
				     , bk.book_writer as data2
				     , bk.book_no as data_key
				  from books bk
				 where 1=1 
				   and bk.book_title like concat('%',#{srchCmmn},'%') or bk.book_writer like concat('%',#{srchCmmn},'%')
				) tb 
		  where 1=1 
		  order by gbn desc, data1 asc
	</select>
	
	<!-- 도서 실시간 검색 -->
	<select id="selectBookSrch" parameterType="project.books.club.cmmn.SrchVO" resultType="project.books.sys.util.CamelMap">
		/*MemberMapper.selectBookSrch*/
		select b.book_no
			 , b.book_title
		     , b.book_writer 
		     , concat(b.book_title, '(',b.book_writer ,')') as book_info
		  from books b 
		 where 1=1 
		   and b.book_title like concat('%',#{srchText},'%')
		    or b.book_writer like concat('%',#{srchText},'%')
		 order by b.book_title asc 
	</select>
	
	<!-- 도서 리뷰 등록 -->
	<insert id="insertBookEval" useGeneratedKeys="true" keyProperty="bookNo" parameterType="project.books.club.book.BookVO">
		/*bookMapper.insertBookEval*/
		insert into books_eval (
			  book_no
			, club_no
			, meeting_no
			, member_no
			, book_score
			, book_eval
			, progress_yn
			, frst_reg_no
			, frst_reg_dt
		) values (
			  #{bookNo}
			, #{clubNo}
			, #{meetingNo}
			, #{memberNo}
			, ifnull(#{bookScore}, '')
			, ifnull(#{bookEval}, '')
			, ifnull(#{progressYn}, 'N')
			, #{userNo}
			, now()
		)
	</insert>
	
	<!-- 도서 리뷰 삭제 -->
	<delete id="deleteBookEval" parameterType="project.books.club.book.BookVO">
		/*bookMapper.deleteBookEval*/
		delete from books_eval
		 where meeting_no = #{meetingNo}
	</delete>
</mapper>
